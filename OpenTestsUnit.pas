unit OpenTestsUnit;

interface

uses
  AccessConnectionUnit,
  System.Generics.Collections {TDictionary} ,
  BuilserUnit,
  ConnectionUnit,
  FMX.Forms,
  System.Classes,
  FMX.Types,
  FMX.Menus,
  FMX.Controls,
  System.UITypes;

type
  OpenTestsClass = class(TInterfacedObject, Builser)
  private
    AOwner: TForm;
    NotifyEvent: TNotifyEvent;
    p: TPanel;
    l: TLabel;
    procedure createOpen;
    procedure OnClickPanel(Sender: TObject);
    //procedure setNotifyEvent(NotifyEvent1: TNotifyEvent);
    procedure destroy;
  public
    constructor create(AOwner: TForm; NotifyEvent1: TNotifyEvent);
  end;

implementation

{ OpenTestsClass }

constructor OpenTestsClass.create(AOwner: TForm; NotifyEvent1: TNotifyEvent);
begin
  self.AOwner := AOwner;
  self.NotifyEvent:= NotifyEvent1;
  createOpen;
end;

procedure OpenTestsClass.createOpen;
var
  Connection1: Connection;
begin
  Connection1 := AccessConnection.create;
  p:= TPanel.Create(nil);
  with p do begin
    Parent:=AOwner;
    Align:=TAlignLayout.alCenter;
    Cursor:=crHandPoint;
    OnClick:=NotifyEvent;
    Width:=800;
    Height:=600;
  end;
  l:= TLabel.Create(nil);
  with l do begin
    Parent:=AOwner;
    Align:=TAlignLayout.alCenter;
    AutoSize:=true;
    Align:=TAlignLayout.alCenter;
    Text:=Connection1.getColTable('caption','table1').First;
    Font.Style:=[TFontStyle.fsBold];
  end;
  Connection1.destroy;
end;

procedure OpenTestsClass.destroy;
begin
  p.Parent:=nil;
  l.Parent:=nil;
end;

procedure OpenTestsClass.OnClickPanel(Sender: TObject);
begin

end;
{
procedure OpenTestsClass.setNotifyEvent(NotifyEvent1: TNotifyEvent);
begin
  self.NotifyEvent:= NotifyEvent1;
end;
}
end.
